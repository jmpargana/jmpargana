import { Extender, Obj, Stores, FormConfig, TransformFunction, ExtenderHandler, CreateSubmitHandlerConfig, Errors, AddValidatorFn, Helpers, ValidationFunction, Keyed } from '@felte/common';
type FormActionConfig<Data extends Obj> = {
    stores: Stores<Data>;
    config: FormConfig<Data>;
    extender: Extender<Data>[];
    validateErrors(data: Data | Keyed<Data>, altValidate?: ValidationFunction<Data> | ValidationFunction<Data>[]): Promise<Errors<Data> | undefined>;
    validateWarnings(data: Data | Keyed<Data>, altWarn?: ValidationFunction<Data> | ValidationFunction<Data>[]): Promise<Errors<Data> | undefined>;
    helpers: Helpers<Data, string> & {
        addValidator: AddValidatorFn<Data>;
        addTransformer(transformer: TransformFunction<Data>): void;
    };
    _setFormNode(node: HTMLFormElement): void;
    _getFormNode(): HTMLFormElement | undefined;
    _getInitialValues(): Data;
    _setCurrentExtenders(extenders: ExtenderHandler<Data>[]): void;
    _getCurrentExtenders(): ExtenderHandler<Data>[];
};
declare function createFormAction<Data extends Obj>({ helpers, stores, config, extender, validateErrors, validateWarnings, _setFormNode, _getFormNode, _getInitialValues, _setCurrentExtenders, _getCurrentExtenders, }: FormActionConfig<Data>): {
    form: (node: HTMLFormElement) => {
        destroy(): void;
    };
    createSubmitHandler: (altConfig?: CreateSubmitHandlerConfig<Data> | undefined) => (event?: Event | undefined) => Promise<void>;
    handleSubmit: (event?: Event | undefined) => Promise<void>;
};
export { FormActionConfig, createFormAction };
