import { Readable } from "svelte/store";
import { FieldValue, Form, FormConfig, FormConfigWithTransformFn, FormConfigWithoutTransformFn, StoreFactory, Obj, UnknownStores, Stores, KnownStores, Helpers, UnknownHelpers, KnownHelpers, SubmitContext, CreateSubmitHandlerConfig, AssignableErrors } from "@felte/common";
type Store<Data> = Readable<Data> | {
    subscribe(subscriber: (value: Data) => void): {
        unsubscribe(): void;
    };
};
declare function get<Data>(store: Store<Data>): Data;
type FailResponse = Omit<Response, "ok"> & {
    ok: false;
};
declare class FelteSubmitError extends Error {
    constructor(message: string, response: FailResponse);
    response: FailResponse;
}
type FieldConfig = {
    name: string;
    touchOnChange?: boolean;
    defaultValue?: FieldValue;
    onFormReset?(e: ResetEvent): void;
};
type Field = {
    field(node: HTMLElement): {
        destroy?(): void;
    };
    onInput(value: FieldValue): void;
    onChange(value: FieldValue): void;
    onBlur(): void;
};
type ResetEvent = Event & {
    target: HTMLFormElement;
};
declare function createField(name: string, config?: Omit<FieldConfig, "name">): Field;
declare function createField(config: FieldConfig): Field;
declare function createField(nameOrConfig: FieldConfig | string, config?: Omit<FieldConfig, "name">): Field;
type Adapters<StoreExt = Record<string, any>> = {
    storeFactory: StoreFactory<StoreExt>;
};
type CoreForm<Data extends Obj = any> = Form<Data> & {
    cleanup(): void;
    startStores(): () => void;
};
declare function createForm<Data extends Obj = Obj, Ext extends Obj = Obj, StoreExt = Record<string, any>>(config: FormConfigWithTransformFn<Data> & Ext, adapters: Adapters<StoreExt>): CoreForm<Data> & UnknownHelpers<Data> & UnknownStores<Data, StoreExt>;
declare function createForm<Data extends Obj = Obj, Ext extends Obj = Obj, StoreExt = Record<string, any>>(config: FormConfigWithoutTransformFn<Data> & Ext, adapters: Adapters<StoreExt>): CoreForm<Data> & KnownHelpers<Data> & KnownStores<Data, StoreExt>;
declare function createForm<Data extends Obj = Obj, Ext extends Obj = Obj, StoreExt = Record<string, any>>(config: FormConfig<Data> & Ext, adapters: Adapters<StoreExt>): CoreForm<Data> & Helpers<Data> & Stores<Data, StoreExt>;
type FelteSuccessDetail<Data extends Obj = Obj> = SubmitContext<Data> & {
    response: unknown;
};
type FelteErrorDetail<Data extends Obj = Obj> = SubmitContext<Data> & {
    error: unknown;
};
type FelteSuccessEvent<Data extends Obj = any> = CustomEvent<FelteSuccessDetail<Data>>;
type FelteErrorEvent<Data extends Obj = any> = CustomEvent<FelteErrorDetail<Data>> & {
    errors?: AssignableErrors<Data>;
    setErrors(errors: AssignableErrors<Data>): void;
};
type FelteSubmitEvent<Data extends Obj = any> = Event & {
    target: HTMLFormElement;
    onSubmit?: CreateSubmitHandlerConfig<Data>["onSubmit"];
    onError?: CreateSubmitHandlerConfig<Data>["onError"];
    onSuccess?: CreateSubmitHandlerConfig<Data>["onSuccess"];
    handleSubmit(onSubmit: CreateSubmitHandlerConfig<Data>["onSubmit"]): void;
    handleError(onError: CreateSubmitHandlerConfig<Data>["onError"]): void;
    handleSuccess(onSuccess: CreateSubmitHandlerConfig<Data>["onSuccess"]): void;
};
declare function createEventConstructors<Data extends Obj = any>(): {
    createErrorEvent: (detail: FelteErrorDetail<Data>) => FelteErrorEvent<Data>;
    createSubmitEvent: () => FelteSubmitEvent<Data>;
    createSuccessEvent: (detail: FelteSuccessDetail<Data>) => FelteSuccessEvent<Data>;
};
export { get as getValueFromStore, FelteSubmitError, createField, Adapters, CoreForm, createForm, FelteSuccessDetail, FelteErrorDetail, FelteSuccessEvent, FelteErrorEvent, FelteSubmitEvent, createEventConstructors };
export type { Field, FieldConfig };
export * from '@felte/common';
//# sourceMappingURL=index.cjs.d.ts.map